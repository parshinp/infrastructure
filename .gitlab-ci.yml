variables:
  VERSION: 1.0.${CI_PIPELINE_ID}

stages:
  - build
  - test
  #- backend-check
  #- frontend-check
  - release
 # - notification

include:
  - template: Security/SAST.gitlab-ci.yml

build-code-job:  # задача с именем build-code-job
  stage: build   # этап build
  script:        # объявление скрипта
    - echo "ARTIFACT_JOB_ID=${CI_JOB_ID}" > CI_JOB_ID.txt  # сохр номера задачи в файл,чтобы в дальнейшем использ. для копирования артефакта  
    - cd backend 
    - mvn package -Dversion.application=${VERSION} -Dmaven.repo.local=${CI_PROJECT_DIR}/.m2/repository # запуск сборки кода
    - cd ../frontend 
    - npm install # загрузка всех сторонних зависимостей
    - npm run build # запуск сборки кода
    - cd .. 
    - echo ${CI_PROJECT_DIR} 
    - mkdir sausage-store-$VERSION  #создание директории,в которую копируются артефакты. для организации удобной структуры архива
    - ls -la
    - ls -la /builds/parshin/sausage-store/backend/target
    - mv backend/target/sausage-store-0.0.1.jar sausage-store-$VERSION/sausage-store-$VERSION.jar # копирование собранного бэкенда
    #sausage-store-0.0.1/sausage-store-0.0.1.jar
    - mv frontend/dist/frontend sausage-store-$VERSION/public_html # копирование собранного фронтэнда
  artifacts:
    paths:
      - ${CI_PROJECT_DIR}/.m2/ # сохранение зависимостей для SAST
      - sausage-store-$VERSION/public_html  # сохранение собранного фронтэнда как артефакт
      - sausage-store-$VERSION/sausage-store-$VERSION.jar # сохранение собранного бэкенда как артефакт
    reports:
      dotenv: CI_JOB_ID.txt # сохранение файла с переменными как артефакт

spotbugs-sast:
  before_script:
    - cd sausage-store-$VERSION/
    - ls -la
    - pwd
    - ls -la
    - ls -la /builds/parshin/sausage-store/
    - cp sausage-store-$VERSION.jar /builds/parshin/sausage-store/backend/sausage-store-$VERSION.jar
  variables:
    COMPILE: "false"
    MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository 

sonarqube-check-backend:
  stage: test
  image: maven:3.8.2-openjdk-16
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
      - cd backend 
      - mvn verify sonar:sonar -Dsonar.projectKey=parshin_sausage-store_AX5VY2NDWyGwrBh1KfJm -Dsonar.host.url=${SONAR_URL} -Dsonar.login=${SONAR_TOKEN} -Dsonar.projectName=02_PAVELPARSHIN_BACKEND
  allow_failure: true
  only:
      - merge_requests
      - main # or the name of your main branch
      - develop

sonarqube-check-frontend:
  stage: test
  image:
    name: sonarsource/sonar-scanner-cli:4.6
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
      - cd frontend
      - sonar-scanner -Dsonar.qualitygate.wait=true -Dsonar.projectKey=591acb99e84bd69ddbde30cadaf0fee228799d59 -Dsonar.host.url=https://sonarqube.praktikum-services.ru -Dsonar.login=591acb99e84bd69ddbde30cadaf0fee228799d59 -Dsonar.projectName=02_PAVELPARSHIN_FRONTEND
  allow_failure: true
  only:
    - merge_requests
    - main # or the name of your main branch
    - develop

upload-release: # задача с именем upload-release
  stage: release # этап release
  # only: # запуск этого шага только при изменениях в директориях backend и frontend
  #   changes:
  #   - backend//*
  #   - frontend//*
  before_script:
   # - pwd
   # - cd sausage-store-$VERSION
   # - ls
   # - apt-get install -y zip 
    #- tar -czvf ./new.tar.gz --exclude='._*' @old.tar.gz
  script:
    - cd backend
    - pwd
    - ls -la
    - mvn -s settings.xml deploy -DskipTests -Dversion=$VERSION -Dpackaging=zip
    - cd ..
    - ls -laS
    - tar czvf sausage-store-$VERSION.tar.gz sausage-store-$VERSION
    - ls -la
    - >
    - 'curl -v -u "${NEXUS_REPO_USER}:${NEXUS_REPO_PASS}" --upload-file sausage-store-$VERSION.tar.gz https://nexus.praktikum-services.ru/repository/sausage-store-pavel-parshin-frontend/$VERSION/sausage-store-$VERSION.tar.gz'
    
    # - echo ${NEXUS_REPO_USER}
    # - echo ${NEXUS_REPO_PASS}
    
    #- echo "Get artifact from job ${ARTIFACT_JOB_ID}" 
    # - > # скачивание артефакта в файл sausage-store-$VERSION.zip
    #  curl --location --output sausage-store-test.zip -H "PRIVATE-TOKEN: ${MY_TOKEN}" 
    #  "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/jobs/${ARTIFACT_JOB_ID}/artifacts"
    #- ls -la
    #- zip -d "sausage-store-$VERSION" ".m2/*"
    #- > # сохранение артефакта в package registry
    #  curl -sSL -H "JOB-TOKEN: ${CI_JOB_TOKEN}" 
    #  -T "sausage-store-$VERSION.zip" "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/sausage-store/${CI_COMMIT_SHA}/" 

#notification-slack:
  # add this comment to show how I managed with issues =))
 # stage: notification
 # script:
 #   - 'curl -X POST -H "Content-type: application/json" --data "{\"text\":\"Pavel Parshin собрал release-0.0.1.\"}" https://hooks.slack.com/services/TPV9DP0N4/B02PSECK8JF/$MY_SLACK_TOKEN'
variables:
  VERSION: 1.0.${CI_PIPELINE_ID}

stages:
#  - build
#  - test
  - frontend
  - backend
#  - release
#  - notification
  - module-pipelines
  - deploy

#include:
#  - template: Security/SAST.gitlab-ci.yml

#build-code-job:  # задача с именем build-code-job
#  stage: build   # этап build
#  script:        # объявление скрипта
#    - echo "ARTIFACT_JOB_ID=${CI_JOB_ID}" > CI_JOB_ID.txt  # сохр номера задачи в файл,чтобы в дальнейшем использ. для копирования артефакта  
#    - cd backend 
#    - mvn package -Dversion.application=${VERSION} -Dmaven.repo.local=${CI_PROJECT_DIR}/.m2/repository # запуск сборки кода
#    - cd ../frontend 
#    - npm install # загрузка всех сторонних зависимостей
#    - npm run build # запуск сборки кода
#    - cd .. 
#    - echo ${CI_PROJECT_DIR} 
#    - mkdir sausage-store-$VERSION  #создание директории,в которую копируются артефакты. для организации удобной структуры архива
#    - ls -la
#    - ls -la /builds/parshin/sausage-store/backend/target
#    - mv ${CI_PROJECT_DIR}/backend/target/sausage-store-$VERSION.jar sausage-store-$VERSION/sausage-store-$VERSION.jar # копирование собранного бэкенда
    #sausage-store-0.0.1/sausage-store-0.0.1.jar
#    - mv ${CI_PROJECT_DIR}/frontend/dist/frontend sausage-store-$VERSION/public_html # копирование собранного фронтэнда
#  artifacts:
#    paths:
#      - ${CI_PROJECT_DIR}/.m2/ # сохранение зависимостей для SAST
#      - sausage-store-$VERSION/public_html  # сохранение собранного фронтэнда как артефакт
#      - sausage-store-$VERSION/sausage-store-$VERSION.jar # сохранение собранного бэкенда как артефакт
#    reports:
#      dotenv: CI_JOB_ID.txt # сохранение файла с переменными как артефакт

#spotbugs-sast:
#  before_script:
#    - cd sausage-store-$VERSION/
#    - ls -la
#    - pwd
#    - ls -la
#    - ls -la /builds/parshin/sausage-store/
#    - cp sausage-store-$VERSION.jar /builds/parshin/sausage-store/backend/sausage-store-$VERSION.jar
#  variables:
#    COMPILE: "false"
#    MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository 

#sonarqube-check-backend:
#  stage: test
#  image: maven:3.8.2-openjdk-16
#  variables:
#    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
#    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
#  cache:
#    key: "${CI_JOB_NAME}"
#    paths:
#      - .sonar/cache
#  script:
#      - cd backend 
#      - mvn verify sonar:sonar -Dsonar.projectKey=parshin_sausage-store_AX5VY2NDWyGwrBh1KfJm -Dsonar.host.url=${SONAR_URL} -Dsonar.login=${SONAR_TOKEN} -Dsonar.projectName=02_PAVELPARSHIN_BACKEND
#  allow_failure: true
#  only:
#      - merge_requests
#      - main # or the name of your main branch
#      - develop

#sonarqube-check-frontend:
#  stage: test
#  image:
#    name: sonarsource/sonar-scanner-cli:4.6
#    entrypoint: [""]
#  variables:
#    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
#    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
#  cache:
#    key: "${CI_JOB_NAME}"
#    paths:
#      - .sonar/cache
#  script:
#      - cd frontend
#      - sonar-scanner -Dsonar.qualitygate.wait=true -Dsonar.projectKey=${SONAR_TOKEN} -Dsonar.host.url=https://sonarqube.praktikum-services.ru -Dsonar.login=${SONAR_TOKEN} -Dsonar.projectName=02_PAVELPARSHIN_FRONTEND
#  allow_failure: true
#  only:
#    - merge_requests
#    - main # or the name of your main branch
#    - develop

#upload-release: # задача с именем upload-release
#  stage: release # этап release 
  # only: # запуск этого шага только при изменениях в директориях backend и frontend
  #   changes:
  #   - backend//*
  #   - frontend//*
#  before_script:
   # - pwd
   # - cd sausage-store-$VERSION
   # - ls
   # - apt-get install -y zip 
    #- tar -czvf ./new.tar.gz --exclude='._*' @old.tar.gz
#  script:
#    - cd backend
#    - pwd
#    - ls -la
#    - mvn -s settings.xml deploy -DskipTests -Dversion=$VERSION -Dpackaging=zip
#    - cd ..
#    - ls -laS
#    - tar czvf sausage-store-$VERSION.tar.gz sausage-store-$VERSION
#    - ls -la
#    - >
#    - 'curl -v -u "${NEXUS_REPO_USER}:${NEXUS_REPO_PASS}" --upload-file sausage-store-$VERSION.tar.gz https://nexus.praktikum-services.ru/repository/sausage-store-parshin_pavel-frontend/$VERSION/sausage-store-$VERSION.tar.gz'

frontend:
  stage: module-pipelines
  trigger:
    include:
      - "/frontend/.gitlab-ci.yml"
    strategy: depend #depend нужен, если какой-нибудь дочерний пайплайн свалился, мы знали, что общий пайплайн тоже идёт с ошибкой
  only:
    changes: #как только происходит изменение в папке frontend, запускается дочерний пайплайн, который лежит в этой папке
      - frontend/**/*

backend:
  stage: module-pipelines
  trigger:
    include:
      - "/backend/.gitlab-ci.yml"
    strategy: depend
  only:
    changes:  #как только происходит изменение в папке backend, запускается дочерний пайплайн, который лежит в этой папке
      - backend/**/*

before_script:
  #устанавливаем ssh-agent для удобства аутентификации по ssh
  - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
  - eval $(ssh-agent -s)
  - apt-get install -y net-tools
  - ifconfig
  #сохраняем сгенеренный ранее приватный ключ для раннера
  - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
  - mkdir -p ~/.ssh
  - chmod 600 ~/.ssh

deploy:
  stage: deploy
  script:
     #выполняем простую команду для проверки
     - ssh ${DEV_USER}@${DEV_HOST} "id"

#notification-slack:
  # add this comment to show how I managed with issues =))
#  stage: notification
#  script:
#   - 'curl -X POST -H "Content-type: application/json" --data "{\"text\":\"Вышла новая версия сосисочной — $VERSION. Скачать фронт можно по ссылке — https://nexus.praktikum-services.ru/repository/sausage-store-parshin_pavel-frontend/$VERSION/sausage-store-$VERSION.tar.gz \"}" https://hooks.slack.com/services/TPV9DP0N4/B02PSECK8JF/$MY_SLACK_TOKEN'
#   - 'curl -X POST -H "Content-type: application/json" --data "{\"text\":\"Скачать бэкенд можно по ссылке — https://nexus.praktikum-services.ru/repository/sausage-store-parshin_pavel-backend/com/yandex/practicum/devops/sausage-store/$VERSION/sausage-store-$VERSION.jar \"}" https://hooks.slack.com/services/TPV9DP0N4/B02PSECK8JF/$MY_SLACK_TOKEN'
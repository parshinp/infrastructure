variables:
#    VERSION: 1.0.${CI_PIPELINE_ID}

include:
  - project: 'templates/ci'
    file: 'DockerInDockerTemplate.yml'  

stages:
   - build-frontend
#   - test
   - build-docker-front-compose
   - deploy-frontend

build-front:
   stage: build-frontend
   script:
      - echo "ARTIFACT_JOB_ID=${CI_JOB_ID}" > CI_JOB_ID.txt  # сохранение номера задачи в файл, чтобы в дальнейшем использовать для копирования артефакта 
      - cd ${CI_PROJECT_DIR}/frontend
      - npm install
      - npm run build
      - cd ..
      - mkdir sausage-store-${VERSION}
      - mv ${CI_PROJECT_DIR}/frontend/dist/frontend sausage-store-$VERSION/public_html # копирование собранного фронтэнда  
   artifacts:
      paths:
         - sausage-store-${VERSION}/public_html
   rules:
      - changes:
           - frontend/*

#sonarqube-check-frontend:
#  dependencies:
#    - build-front
#  stage: test
#  image:
#    name: "sonarsource/sonar-scanner-cli:latest"
#    entrypoint: [""]
#  variables:
#    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
#    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
#  cache:
#    key: "${CI_JOB_NAME}"
#    paths:
#      - .sonar/cache
#  script:
#      - cd ${CI_PROJECT_DIR}/frontend/
#      - sonar-scanner -Dsonar.projectKey=${SONAR_TOKEN} -Dsonar.host.url=${SONAR_URL} -Dsonar.login=${SONAR_TOKEN} -Dsonar.projectName=02_PAVELPARSHIN_FRONTEND
#  allow_failure: true

build-frontend-docker-compose:
  stage: build-docker-front-compose
  image: docker:20.10.12-dind-rootless
  dependencies:
    - build-front
  before_script:
    - service dockerd status
    - service dockerd start
    #- dockerd
    - until docker info; do sleep 1; done
    # переменные CI_REGISTRY_USER, CI_REGISTRY_PASSWORD, CI_REGISTRY генерятся Гитлабом, их задавать не надо
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - cd backend
    - >
      docker build
      --build-arg VERSION=$VERSION
      --tag $CI_REGISTRY_IMAGE/sausage-frontend:$CI_COMMIT_SHA
      .
    - docker push $CI_REGISTRY_IMAGE/sausage-frontend:$CI_COMMIT_SHA

#build-frontend-docker-compose:
#  stage: build-docker-front-compose
#  image: docker:20.10.12-dind-rootless
#  cache:
#    key: "${CI_JOB_NAME}"
#  dependencies:
#    - build-front
#  before_script:
#    - cd frontend
#    - until docker info; do sleep 2; done
    # переменные CI_REGISTRY_USER, CI_REGISTRY_PASSWORD, CI_REGISTRY генерятся Гитлабом, их задавать не надо
    # - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
#  script:
#    - docker build --build-arg VERSION=1.0.${CI_PIPELINE_ID} --tag $CI_REGISTRY_IMAGE/sausage-frontend:$VERSION .
#    - docker tag $CI_REGISTRY_IMAGE/sausage-frontend:$VERSION $CI_REGISTRY_IMAGE/sausage-frontend:$VERSION
#    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
#    - docker push $CI_REGISTRY_IMAGE/sausage-frontend:$VERSION

deploy-frontend:
  stage: deploy-frontend
  image: alpine:3.15.0
  before_script:
    - apk add openssh-client bash
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - ssh ${DEV_USER}@${DEV_HOST}
      "export "VERSION=${VERSION}";
       export "CI_REGISTRY_USER=${CI_REGISTRY_USER}";
       export "CI_JOB_TOKEN=${CI_JOB_TOKEN}";
       export "CI_REGISTRY=${CI_REGISTRY}";
      /bin/bash -s " < ./compose_front_deploy.sh
  environment:
    name: prod-frontend-docker
  rules:
    - changes:
         - frontend/*
##      when: manual
